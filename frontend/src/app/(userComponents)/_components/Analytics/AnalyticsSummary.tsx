"use client";

import React from "react";
import SmileEmoji from "../../../../components/svg/SmileEmoji";
import { Sparkles } from "lucide-react";
import { motion } from "framer-motion";
import GreenMood from "src/components/svg/GreenMood";

interface AnalyticsSummaryProps {
  summary: {
    bestDay?: string;
    overallAverage?: number;
    participantCount?: number;
    streakCount?: number;
  };
  range: number;
}

const WeekDayTranslation = {
  Monday: "–î–∞–≤–∞–∞",
  Tuesday: "–ú—è–≥–º–∞—Ä",
  Wednesday: "–õ—Ö–∞–≥–≤–∞",
  Thursday: "–ü“Ø—Ä—ç–≤",
  Friday: "–ë–∞–∞—Å–∞–Ω",
  Saturday: "–ë—è–º–±–∞",
  Sunday: "–ù—è–º",
} as const;

const AnalyticsSummary: React.FC<AnalyticsSummaryProps> = ({
  summary,
  range,
}) => {
  const isWeekDay = (day: string): day is keyof typeof WeekDayTranslation =>
    day in WeekDayTranslation;

  if (!summary) {
    return (
      <div className="p-4 text-center text-gray-500">–ú—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π</div>
    );
  }

  const streak = summary.streakCount || 0;
  const maxStreak = 10;
  const isRewardUnlocked = streak >= maxStreak;

  const stats = [
    {
      title: "–¢–∞–Ω–∏–π —Ö–∞–º–≥–∏–π–Ω ”©”©–¥—Ä”©–≥ ”©–¥”©—Ä",
      value:
        summary.bestDay && isWeekDay(summary.bestDay)
          ? WeekDayTranslation[summary.bestDay]
          : "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π",
      description: `${
        range === 7 ? "–°“Ø“Ø–ª–∏–π–Ω –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥–æ–æ—Ä" : "–°“Ø“Ø–ª–∏–π–Ω —Å–∞—Ä–∞–∞—Ä"
      }`,
      icon: <GreenMood className="w-8 h-8" />,
      color: "text-[#57C74D]",
    },
    {
      title: "–û—Ä–æ–ª—Ü—Å–æ–Ω ”©–¥—Ä–∏–π–Ω —Ç–æ–æ",
      value: summary.participantCount ?? 0,

      description: `${
        range === 7
          ? `–¢–∞ —Å“Ø“Ø–ª–∏–π–Ω –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç –Ω–∏–π—Ç ${
              summary.participantCount ?? 0
            } —É–¥–∞–∞ –º—ç–¥—Ä—ç–º–∂—ç—ç —Ö—É–≤–∞–∞–ª—Ü—Å–∞–Ω.`
          : `–¢–∞ —Å“Ø“Ø–ª–∏–π–Ω —Å–∞—Ä–¥ –Ω–∏–π—Ç ${
              summary.participantCount ?? 0
            } —É–¥–∞–∞ –º—ç–¥—Ä—ç–º–∂—ç—ç —Ö—É–≤–∞–∞–ª—Ü—Å–∞–Ω.`
      }`,
      icon: <SmileEmoji />,
      color: "text-[#4B85F7]",
    },
    {
      title: isRewardUnlocked
        ? "üéâ –£—Ä–∞–º—à—É—É–ª–∞–ª –∏–¥—ç–≤—Ö–∂—Å—ç–Ω!"
        : "üî• –£—Ä–∞–º—à—É—É–ª–∞–ª–¥ –æ–π—Ä—Ç–æ–∂ –±–∞–π–Ω–∞",
      value: isRewardUnlocked ? `10/10` : `${streak}/10`,
      description: isRewardUnlocked
        ? "–¢–∞ 10 —Ö–æ–Ω–æ–≥ –¥–∞—Ä–∞–∞–ª–∞–Ω –æ—Ä–æ–ª—Ü–æ–∂ —É—Ä–∞–º—à—É—É–ª–ª–∞–∞ –∞–≤–ª–∞–∞!"
        : `–¢–∞ ${maxStreak - streak} ”©–¥”©—Ä –¥–∞—Ä–∞–∞–ª–∞–Ω –æ—Ä–æ–ª—Ü–≤–æ–ª —É—Ä–∞–º—à—É—É–ª–ª–∞–∞ –∞–≤–Ω–∞.`,
      icon: (
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.6 }}
          className={`w-8 h-8 rounded-full flex items-center justify-center ${
            isRewardUnlocked
              ? "bg-yellow-400 text-white animate-pulse"
              : "bg-gray-200 text-yellow-500"
          }`}
        >
          <Sparkles size={16} />
        </motion.div>
      ),
      color: "text-[#4B85F7]",
    },
  ];

  return (
    <div className="flex flex-col gap-8">
      <div>
        <h1 className="text-[26px] font-semibold mb-6">
          –¢–∞–Ω—ã —Å—ç—Ç–≥—ç–ª —Å–∞–Ω–∞–∞–Ω—ã –±–∞–π–¥–∞–ª
        </h1>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {stats.map((stat, index) => (
            <div
              key={index}
              className="bg-white rounded-lg shadow-md p-6 flex items-center justify-between"
            >
              <div className="flex flex-col gap-2">
                <p className="text-[16px] text-neutral-500">{stat.title}</p>
                <p className={`text-[26px] font-medium ${stat.color} `}>
                  {stat.value}
                </p>
                <p className="text-[16px] text-gray-600">{stat.description}</p>

                {/* Progress bar if not yet unlocked */}
                {!isRewardUnlocked && index === 2 && (
                  <div className="w-full h-2 mt-2 bg-gray-200 rounded-full overflow-hidden">
                    <motion.div
                      className="h-full bg-gradient-to-r from-yellow-400 to-pink-500"
                      initial={{ width: 0 }}
                      animate={{
                        width: `${(streak / maxStreak) * 100}%`,
                      }}
                      transition={{ duration: 0.8 }}
                    />
                  </div>
                )}
              </div>
              <div className="ml-4">{stat.icon}</div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AnalyticsSummary;
